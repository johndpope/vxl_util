//
//  vgl_plus_extra.cpp
//  Relocalization
//
//  Created by jimmy on 2016-08-14.
//  Copyright (c) 2016 Nowhere Planet. All rights reserved.
//

#include "vgl_plus_extra.h"
#include <vgl/vgl_intersection+.h>
#include <vgl/vgl_fit_ellipse_2d.h>
#include <vgl/vgl_fit_line_2d.h>

int VglPlusExtra::lineEllipseIntersection(const vgl_line_2d<double> & line, const vgl_ellipse_2d<double> & ellipse,
                                     vgl_point_2d<double> & pt1, vgl_point_2d<double> & pt2, bool isMajorAxis)
{
    vgl_polygon<double> poly = ellipse.polygon();
    assert(poly.num_sheets() == 1);
    int num = 0;
    //  printf("sheet number is %u\n", poly.num_sheets());
    const vcl_vector< vgl_point_2d< double > > sheet = poly[0];
    assert( sheet.size() > 1 );
    for ( unsigned int v = 0; v < sheet.size() - 1; v++ )
    {
        vgl_line_segment_2d< double > edge( sheet[v], sheet[v+1] );
        vgl_point_2d<double> p;
        bool isIntersection = vgl_intersection(line, edge, &p);
        if (isIntersection) {
            if (num == 0) {
                pt1 = p;
                num++;
            }
            else if(num == 1)
            {
                pt2 = p;
                num++;
            }
        }
        if (num == 2) {
            break;
        }
    }
    
    // last line segment
    if(num != 2)
    {
        vgl_line_segment_2d< double > edge( sheet.back(), sheet.front());
        vgl_point_2d<double> p;
        bool isIntersection = vgl_intersection(line, edge, &p);
        if (isIntersection) {
            if (num == 0) {
                pt1 = p;
                num++;
            }
            else if(num == 1)
            {
                pt2 = p;
                num++;
            }
        }
    }
    
    double disDif = 20;
    if (num == 2 && isMajorAxis) {
        double dis = vgl_distance(pt1, pt2);
        // distance of two points should be as the similar length of minor or major axis
        double dis1 = vgl_distance(ellipse.major_diameter().point1(), ellipse.major_diameter().point2());
        double dis2 = vgl_distance(ellipse.minor_diameter().point1(), ellipse.minor_diameter().point2());
        if (fabs(dis - dis1) >= disDif && fabs(dis - dis2) >= disDif) {
            num = 0;
        }
    }
    return num;
}

int VglPlusExtra::sampleElliseInImage(const vgl_ellipse_2d<double> & ellipse, int sampleNum,
                                 int imageW, int imageH, vcl_vector<vgl_point_2d<double> > & pts)
{
    vgl_polygon<double> poly = ellipse.polygon(sampleNum);
    assert(poly.num_sheets() == 1);
    const vcl_vector< vgl_point_2d< double > > sheet = poly[0];
    for (int i = 0; i<sheet.size(); i++) {
        if (VglPlus::vgl_inside_image(sheet[i], imageW, imageH)) {
            pts.push_back(sheet[i]);
        }
    }
    return (int)pts.size();
}

bool VglPlusExtra::lineElliseTangency(const vgl_line_2d<double> & line, const vgl_ellipse_2d<double> & ellipse, vgl_point_2d<double> & pt,
                                 double disThreshold, int sampleNum)
{
    printf("VglPlus::lineElliseTangency is un stable\n");
    assert(0);
    vgl_polygon<double> poly = ellipse.polygon(sampleNum);
    assert(poly.num_sheets() == 1);
    
    const vcl_vector< vgl_point_2d< double > > sheet = poly[0];
    assert( sheet.size() > 1 );
    
    double a = line.a();
    double b = line.b();
    double c = line.c();
    int positive_num = 0;
    int negative_num = 0;
    int minDis = INT_MAX;
    for (int i = 0; i<sheet.size(); i++) {
        double dis = vgl_distance(line, sheet[i]);
        if (dis < minDis) {
            minDis = dis;
            pt = sheet[i];
        }
        double nominator = a * sheet[i].x() + b * sheet[i].y() + c;
        if (nominator >= 0) {
            positive_num++;
        }
        else
        {
            negative_num++;
        }
    }
    // distance is small enough and most of the point in the one side of the line
    if (minDis < disThreshold && fabs(positive_num- negative_num)/sampleNum >= 0.99) {
        return true;
    }
    return false;
}

bool VglPlusExtra::lineEllipseTangencyByProjection(int imageW, int imageH,
                                              const vgl_line_2d<double> & line,
                                              const vgl_ellipse_2d<double> & ellipseInImage,
                                              vgl_point_2d<double> & pt, int sampleNum)
{
    vil_image_view<vxl_byte> maskImage(imageW, imageH, 3);
    maskImage.fill(0);
    
    VilPlus::draw_line(maskImage, line, VilPlus::white(), 2);
    
    vgl_polygon<double> poly = ellipseInImage.polygon(sampleNum);
    assert(poly.num_sheets() == 1);
    
    const vcl_vector< vgl_point_2d< double > > sheet = poly[0];
    assert( sheet.size() > 1 );
    
    vcl_vector<vgl_point_2d<double>> pts;
    for (int i = 0; i<sheet.size(); i++) {
        int x = vnl_math::rnd_halfinttoeven(sheet[i].x());
        int y = vnl_math::rnd_halfinttoeven(sheet[i].y());
        if (x >= 0 && x < imageW &&
            y >= 0 && y < imageH) {
            if (maskImage(x, y) == 255) {
                pts.push_back(sheet[i]);
            }
        }
    }
    
    if (pts.size() == 0) {
        return false;
    }
    
    // caluclate average position
    double avgX = 0.0;
    double avgY = 0.0;
    for (int i =0; i<pts.size(); i++) {
        avgX += pts[i].x();
        avgY += pts[i].y();
    }
    avgX /= pts.size();
    avgY /= pts.size();
    
    double stdX = 0.0;
    double stdY = 0.0;
    for (int i = 0; i<pts.size(); i++) {
        stdX += (avgX - pts[i].x()) * (avgX - pts[i].x());
        stdY += (avgY - pts[i].y()) * (avgY - pts[i].y());
    }
    
    stdX = sqrt(stdX/pts.size());
    stdY = sqrt(stdY/pts.size());
    printf("std x, y is %f %f\n", stdX, stdY);
    
    pt = vgl_point_2d<double>(avgX, avgY);
    return true;
}

class EllipsePoints
{
public:
    vcl_vector<vgl_point_2d<double> > pts_;
    bool valid_;   // not be merged by other ellipse
    vgl_conic<double> conic_;
    
    EllipsePoints()
    {
        valid_ = false;
    }
    bool operator <(const EllipsePoints & other) const
    {
        return pts_.size() < other.pts_.size();
    }
    bool operator >(const EllipsePoints & other) const
    {
        return pts_.size() > other.pts_.size();
    }
};



bool VglPlusExtra::mergeEllipse(const vcl_vector<vgl_ellipse_2d<double> > & ellipses, const vcl_vector< vcl_vector<vgl_point_2d<double> > > & ellipse_pts,
                           const double distance_threshold,
                           vcl_vector<vgl_ellipse_2d<double> > & merged_ellipse, vcl_vector<vcl_vector<vgl_point_2d<double> > > & merged_points)
{
    assert(ellipses.size() == ellipse_pts.size());
    
    const double inlier_ratio_threshold = 0.5; //
    
    // order ellipse by pixels numbers
    vcl_vector<EllipsePoints> conics;
    for (int i = 0; i<ellipses.size(); i++) {
        EllipsePoints elli;
        elli.pts_ = ellipse_pts[i];
        elli.valid_ = true;
        elli.conic_ = vgl_conic<double>(ellipses[i]);
        conics.push_back(elli);
    }
    vcl_sort(conics.begin(), conics.end(), vcl_greater<EllipsePoints>());
    
    // greedily merge
    for (int i = 0; i<conics.size(); i++) {
        for (int j = i+1; j<conics.size(); j++) {
            // merge j to i
            if (conics[i].valid_ && conics[j].valid_) {
                vgl_conic<double> cur_conic = conics[i].conic_;
                vgl_box_2d<double> cur_box  = vgl_homg_operators_2d<double>::compute_bounding_box(cur_conic);
                cur_box.expand_about_centroid(10); // expand bounding box.
                vcl_vector<vgl_point_2d<double> > cur_pts = conics[j].pts_;
                vcl_vector<vgl_point_2d<double> > inlier_pts;
                for (int k = 0; k<cur_pts.size(); k++) {
                    vgl_point_2d<double> p = cur_pts[k];
                    if (cur_box.contains(p)) {
                        double dis = vgl_homg_operators_2d<double>::distance_squared(cur_conic, vgl_homg_point_2d<double>(p));
                        if (dis < distance_threshold * distance_threshold) {
                            inlier_pts.push_back(p);
                        }
                    }
                }
                // merge j to i
                if (1.0 * inlier_pts.size()/cur_pts.size() > inlier_ratio_threshold) {
                    conics[i].pts_.insert(conics[i].pts_.end(), inlier_pts.begin(), inlier_pts.end());
                    conics[j].valid_ = false;
                    // update conic equation
                    vgl_ellipse_2d<double> elli = vgl_fit_ellipse_2d_DLT(conics[i].pts_);
                    conics[i].conic_ = vgl_conic<double>(elli);
                }
            }
        }
    }
    
    vcl_sort(conics.begin(), conics.end(), vcl_greater<EllipsePoints>());
    
    // return valid conic
    for (int i = 0; i<conics.size(); i++) {
        if (conics[i].valid_) {
            merged_ellipse.push_back(vgl_ellipse_2d<double>(conics[i].conic_));
            merged_points.push_back(conics[i].pts_);
        }
    }
    return true;
}

bool VglPlusExtra::mergeLinesegments(const vcl_vector<vgl_line_segment_2d<double> > & segments,
                                const vcl_vector<vcl_vector<vgl_point_2d<double> > > & segment_pts,
                                const double distance_threshold,
                                vcl_vector<vgl_line_segment_2d<double> > & merged_segments,
                                vcl_vector<vcl_vector<vgl_point_2d<double> > > & merged_pts)
{
    assert(segments.size() == segment_pts.size());
    
    const double inlier_ratio_threshold = 0.7; //
    vcl_vector<LinePoints> line_pts;
    for (int i = 0; i<segments.size(); i++) {
        vgl_line_2d<double> line(segments[i].point1(), segments[i].point2());
        LinePoints lp;
        lp.line_ = line;
        lp.pts_ = segment_pts[i];
        lp.seg_ = segments[i];
        line_pts.push_back(lp);
    }
    
    vcl_sort(line_pts.begin(), line_pts.end(), vcl_greater<LinePoints>::greater());
    
    // greedy mergy
    for (int i = 0; i<line_pts.size(); i++) {
        for (int j = i+1; j<line_pts.size(); j++) {
            if (line_pts[i].valid_ && line_pts[j].valid_) {
                vgl_line_2d<double> cur_line = line_pts[i].line_;
                vcl_vector<vgl_point_2d<double> > cur_pts = line_pts[j].pts_; // points to be merged
                vcl_vector<vgl_point_2d<double> > inlier_pts;
                for (int k = 0; k<cur_pts.size(); k++) {
                    double dis = vgl_distance(cur_pts[k], cur_line);
                    if (dis < distance_threshold) {
                        inlier_pts.push_back(cur_pts[k]);
                    }
                }
                if (1.0 * inlier_pts.size()/cur_pts.size() > inlier_ratio_threshold) {
                    vcl_vector<vgl_point_2d<double> > all_pts;
                    all_pts.insert(all_pts.end(), inlier_pts.begin(), inlier_pts.end());
                    all_pts.insert(all_pts.end(), line_pts[i].pts_.begin(), line_pts[i].pts_.end());
                    
                    vgl_line_2d<double> estimated_line = vgl_fit_line_2d(line_pts[i].pts_);
                    // project the two line segment to the line and merge
                    vgl_point_2d<double> p1 = vgl_closest_point(estimated_line, line_pts[i].seg_.point1());
                    vgl_point_2d<double> p2 = vgl_closest_point(estimated_line, line_pts[i].seg_.point2());
                    vgl_point_2d<double> p3 = vgl_closest_point(estimated_line, line_pts[j].seg_.point1());
                    vgl_point_2d<double> p4 = vgl_closest_point(estimated_line, line_pts[j].seg_.point2());
                    vgl_line_segment_2d<double> merged_seg;
                    bool isMerged = VglPlus::mergeTwolineSegmentOnALine(vgl_line_segment_2d<double>(p1, p2),
                                                                        vgl_line_segment_2d<double>(p3, p4),
                                                                        merged_seg);
                    if (isMerged) {
                        line_pts[i].pts_.insert(line_pts[i].pts_.end(), inlier_pts.begin(), inlier_pts.end());
                        line_pts[i].line_ = estimated_line;
                        line_pts[i].seg_  = merged_seg;
                        line_pts[j].valid_ = false;
                    }
                }
            }
        }
    }
    
    vcl_sort(line_pts.begin(), line_pts.end(), vcl_greater<LinePoints>::greater());
    
    // output
    for (int i = 0; i<line_pts.size(); i++) {
        if (line_pts[i].valid_) {
            merged_segments.push_back(line_pts[i].seg_);
            merged_pts.push_back(line_pts[i].pts_);
        }
    }
    return true;
}

vcl_vector<vgl_point_2d<double> > VglPlusExtra::intersection(const vgl_ellipse_2d<double> & ellipse, const vgl_line_segment_2d<double> & seg)
{
    vgl_conic<double> conic = vgl_conic<double>(ellipse);
    vcl_vector<vgl_point_2d<double> > intersections;
    
    vgl_homg_line_2d<double> homg_line(vgl_homg_point_2d<double>(seg.point1()), vgl_homg_point_2d<double>(seg.point2()));
    
    vcl_list<vgl_homg_point_2d<double> > pts = vgl_homg_operators_2d<double>::intersection(conic, homg_line);
    for (vcl_list<vgl_homg_point_2d<double>>::iterator ite = pts.begin(); ite != pts.end(); ite++) {
        if (ite->w() != 0.0) {
            double x = ite->x()/ite->w();
            double y = ite->y()/ite->w();
            double dis = vgl_distance(vgl_point_2d<double>(x, y), seg);
            if (dis < 1.0) {
                intersections.push_back(vgl_point_2d<double>(x, y));
            }
        }
    }
    
    return intersections;
}






